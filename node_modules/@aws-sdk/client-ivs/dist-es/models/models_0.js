import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { IvsServiceException as __BaseException } from "./IvsServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export const ChannelLatencyMode = {
    LowLatency: "LOW",
    NormalLatency: "NORMAL",
};
export const TranscodePreset = {
    ConstrainedBandwidthTranscodePreset: "CONSTRAINED_BANDWIDTH_DELIVERY",
    HigherBandwidthTranscodePreset: "HIGHER_BANDWIDTH_DELIVERY",
};
export const ChannelType = {
    AdvancedHDChannelType: "ADVANCED_HD",
    AdvancedSDChannelType: "ADVANCED_SD",
    BasicChannelType: "BASIC",
    StandardChannelType: "STANDARD",
};
export class PendingVerification extends __BaseException {
    constructor(opts) {
        super({
            name: "PendingVerification",
            $fault: "client",
            ...opts,
        });
        this.name = "PendingVerification";
        this.$fault = "client";
        Object.setPrototypeOf(this, PendingVerification.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export const RenditionConfigurationRendition = {
    FULL_HD: "FULL_HD",
    HD: "HD",
    LOWEST_RESOLUTION: "LOWEST_RESOLUTION",
    SD: "SD",
};
export const RenditionConfigurationRenditionSelection = {
    ALL: "ALL",
    CUSTOM: "CUSTOM",
    NONE: "NONE",
};
export const RecordingMode = {
    Disabled: "DISABLED",
    Interval: "INTERVAL",
};
export const ThumbnailConfigurationResolution = {
    FULL_HD: "FULL_HD",
    HD: "HD",
    LOWEST_RESOLUTION: "LOWEST_RESOLUTION",
    SD: "SD",
};
export const ThumbnailConfigurationStorage = {
    LATEST: "LATEST",
    SEQUENTIAL: "SEQUENTIAL",
};
export const RecordingConfigurationState = {
    Active: "ACTIVE",
    CreateFailed: "CREATE_FAILED",
    Creating: "CREATING",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ChannelNotBroadcasting extends __BaseException {
    constructor(opts) {
        super({
            name: "ChannelNotBroadcasting",
            $fault: "client",
            ...opts,
        });
        this.name = "ChannelNotBroadcasting";
        this.$fault = "client";
        Object.setPrototypeOf(this, ChannelNotBroadcasting.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export const StreamHealth = {
    Starving: "STARVING",
    StreamHealthy: "HEALTHY",
    Unknown: "UNKNOWN",
};
export const StreamState = {
    StreamLive: "LIVE",
    StreamOffline: "OFFLINE",
};
export class StreamUnavailable extends __BaseException {
    constructor(opts) {
        super({
            name: "StreamUnavailable",
            $fault: "server",
            ...opts,
        });
        this.name = "StreamUnavailable";
        this.$fault = "server";
        Object.setPrototypeOf(this, StreamUnavailable.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export const StreamKeyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.value && { value: SENSITIVE_STRING }),
});
export const BatchGetStreamKeyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.streamKeys && { streamKeys: obj.streamKeys.map((item) => StreamKeyFilterSensitiveLog(item)) }),
});
export const CreateChannelResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.streamKey && { streamKey: StreamKeyFilterSensitiveLog(obj.streamKey) }),
});
export const CreateStreamKeyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.streamKey && { streamKey: StreamKeyFilterSensitiveLog(obj.streamKey) }),
});
export const GetStreamKeyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.streamKey && { streamKey: StreamKeyFilterSensitiveLog(obj.streamKey) }),
});
export const PutMetadataRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.metadata && { metadata: SENSITIVE_STRING }),
});
